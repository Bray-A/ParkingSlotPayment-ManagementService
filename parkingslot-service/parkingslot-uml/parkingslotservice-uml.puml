@startuml
actor User
participant "ParkingSlotController" as Controller
participant "ParkingSlotService" as Service
participant "ParkingSlotRepository" as Repository

User -> Controller: getAllSlots()
activate User
activate Controller
Controller -> Service: getAllSlots()
activate Service
Service -> Repository: findAll()
activate Repository
Repository -> Service: List<ParkingSlot>
deactivate Repository
Service -> Controller: List<ParkingSlot>
deactivate Service
Controller -> User: List of ParkingSlot
deactivate Controller

== Get parking slot by ID ==
User -> Controller: getLocation(Long id)
activate Controller
Controller -> Service: getLocationById(id)
activate Service
Service -> Repository: findById(id)
activate Repository

alt Parking slot exists
    Repository -> Service: ParkingSlot
    deactivate Repository
    Service -> Controller: ParkingSlot
    deactivate Service
    Controller -> User: ParkingSlot found
deactivate Controller
else Parking slot not found

    Controller -> User: ParkingSlot not found
deactivate Controller
end

User -> Controller: createSlot(ParkingSlot parkingSlot)
activate Controller
Controller -> Service: createSlot(parkingSlot)
activate Service
Service -> Repository: save(parkingSlot)
activate Repository
Repository -> Service: ParkingSlot
deactivate Repository
Service -> Controller: ParkingSlot
deactivate Service
Controller -> User: ParkingSlot created
deactivate Controller


User -> Controller: updateSlotAvailability(Long id, boolean availability)
activate Controller
Controller -> Service: getSlotById(id)
activate Service
Service -> Repository: findById(id)
activate Repository

alt Parking slot exists
    Repository -> Service: ParkingSlot
    deactivate Repository
    Service -> Controller: ParkingSlot
    Controller -> Service: updateSlot(id, ParkingSlot)
    activate Repository
    Repository -> Service: ParkingSlot (updated)
    deactivate Repository
    Service -> Controller: ParkingSlot (updated)
    deactivate Service
    Controller -> User: ParkingSlot Availability updated
deactivate Controller
else Parking slot not found

    deactivate Service
    Controller -> User: ParkingSlot not found
deactivate Controller
end


User -> Controller: deleteSlot(Long id)
activate Controller
Controller -> Service: getSlotById(id)
activate Service
Service -> Repository: findById(id)
activate Repository

alt Parking slot exists
    Repository -> Service: ParkingSlot
    deactivate Repository
    Service -> Repository: deleteById(id)
    activate Repository
    Repository -> Service: Slot deleted
    deactivate Repository
    Service -> Controller: Slot deleted
    deactivate Service
    Controller -> User: ParkingSlot deleted
deactivate Controller
else Parking slot not found

    Controller -> User: ParkingSlot deleted
    deactivate User
deactivate Controller
end
@enduml
