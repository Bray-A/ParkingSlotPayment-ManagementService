@startuml
actor User

box "Payment Service" #D3D3D3
    participant "PaymentController" as Controller
    participant "PaymentServiceImpl" as PaymentService
    participant "PaymentRepository" as PaymentRepository
    participant "RegularCalculate" as RegularCalculate
    participant "VipCalculate" as VipCalculate
end box

box "External Services" #90EE90
    participant "TransportService" as TransportService
    participant "ParkingSlotService" as ParkingSlotService
end box

User -> Controller: createPayment(Payment paymentRequest)
activate User
activate Controller
Controller -> PaymentService: createPayment(Payment)
activate PaymentService

PaymentService -> TransportService: getTransportById(transportId)
activate TransportService
TransportService -> PaymentService: Transport
deactivate TransportService

PaymentService -> ParkingSlotService: getParkingLocationById(locationId)
activate ParkingSlotService
ParkingSlotService -> PaymentService: ParkingSlot
deactivate ParkingSlotService

PaymentService -> ParkingSlotService: updateAvailability(locationId, false)
activate ParkingSlotService
ParkingSlotService -> PaymentService: updateAvailability updated

deactivate ParkingSlotService

alt ParkingSlot is VIP
    PaymentService -> VipCalculate: calculateTotalPrice(transport.getType())
    activate VipCalculate
    VipCalculate -> PaymentService: totalPrice
    deactivate VipCalculate
else
    PaymentService -> RegularCalculate: calculateTotalPrice(transport.getType())
    activate RegularCalculate
    RegularCalculate -> PaymentService: totalPrice
    deactivate RegularCalculate
end

PaymentService -> PaymentRepository: save(Payment)
activate PaymentRepository
PaymentRepository -> PaymentService: Payment (created)
deactivate PaymentRepository

PaymentService -> Controller: Payment (created)
deactivate PaymentService

Controller -> User: Payment created
deactivate Controller


User -> Controller: getAllPayments()
activate Controller
Controller -> PaymentService: getAllPayments()
activate PaymentService

PaymentService -> PaymentRepository: findAll()
activate PaymentRepository
PaymentRepository -> PaymentService: List<Payment>
deactivate PaymentRepository

PaymentService -> Controller: List<Payment>
deactivate PaymentService
Controller -> User: List of Payments
deactivate Controller


User -> Controller: deletePayment(Long id)
activate Controller
Controller -> PaymentService: deletePayment(Long id)
activate PaymentService

PaymentService -> PaymentRepository: findById(id)
activate PaymentRepository
PaymentRepository -> PaymentService: Optional<Payment>
deactivate PaymentRepository

alt Payment found
    PaymentService -> ParkingSlotService: updateAvailability(locationId, true)
    activate ParkingSlotService
    ParkingSlotService -> PaymentService: updateAvailability updated
    deactivate ParkingSlotService

    PaymentService -> PaymentRepository: deleteById(id)
    activate PaymentRepository
    PaymentRepository -> PaymentService: deleteById deleted
    deactivate PaymentRepository

    PaymentService -> Controller: Payment deleted
else
    PaymentService -> Controller: RuntimeException (Payment not found)
deactivate PaymentService
end

Controller -> User: Payment deleted
deactivate User
deactivate Controller

@enduml
